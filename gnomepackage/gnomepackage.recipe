#
# Copyright (c) 2004-2007 rPath, Inc.
#               2006-2013 The Foresight Linux Project
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#
class GnomePackageRecipe(CPackageRecipe):
    buildRequires = [
        'pkgconfig:devel', 'gtk:devel', 'zlib:devel', 'libX11:devel',
        'libXau:devel', 'libXdmcp:devel', 'libXext:devel', 'libXi:devel',
        'libXinerama:devellib', 'libXrender:devel', 'libdmx:devel',
        'libICE:devel', 'libSM:devel', 'dbus:devel', 'dbus-glib:devellib',
        'dbus-glib:devel', 'intltool:runtime', 'intltool:devel',
        'glib:runtime', 'libXt:devel',
        'file:runtime', 'expat:devel', 'gettext:runtime', 'gcc-c++:runtime',
        'libxslt:runtime', 'which:runtime', 'gettext:devel',
        'autoconf:runtime', 'automake:runtime', 'gdk-pixbuf:runtime',
        'libtool:devel', 'libtool:runtime',
        'gnome-common:runtime', 'gnome-common:devel', 'desktop-file-utils:runtime',
        'gtk-doc:runtime', 'gtk-doc:devel', 'gnome-doc-utils:runtime', 'gnome-doc-utils:devel',
        # otherwise it will want to fetch it online...
        'docbook-dtds:data'
        ]

    abstractBaseClass = True
    name = 'gnomepackage'
    version = '2.32'

    #
    # Options that sub-class recipes can override

    # set this to the URL of a source archive if the package
    # is not on GNOME's ftp server.
    externalArchive = None
    # set this to the URL of a git repository if want to check out from git
    gitUrl = None
    gitCommit = None

    # Optional. Used when gitUrl is defined.
    # To skip autogen, define to None or False.
    autoGen = 'NOCONFIGURE=yes ./autogen.sh'

    # list to hold patches
    patches = []

    # args to r.Configure()
    extraConfig = ''
    configureName = 'configure'
    preConfigure = ''

    # args to r.Make()
    preMake = ''
    makeArgs = ''

    # args to r.MakeInstall()
    preMakeInstall = 'GCONF_DISABLE_MAKEFILE_SCHEMA_INSTALL=1'
    makeInstallArgs = ''

    # specify files as doc
    docs = []

    # cover the cases where pot files naming doesn't match pkg naming
    potFileName = '%(name)s'

    # End options that sub-class recipes can use
    #

    gnomeExtraConfig = ''
    if Use.builddocs:
        gnomeExtraConfig += ' --enable-gtk-doc'
        buildRequires.extend(['gtk-doc:runtime', 'gnome-doc-utils:runtime',
                              'gnome-doc-utils:devel', ])
    else:
        gnomeExtraConfig += ' --disable-gtk-doc'

    def setup(r):
        if r.__class__.__name__ == 'GnomePackageRecipe':
            return

        # this one is subtle. we don't want a pkg that loads GnomePackageRecipe to be a buildReq of itself
        # since this turns into a lot of dep cicles inside rMake... 
        #r.clearBuildReqs('%(name)s') # doesn't work :/

        r.macros.optflags = '-Os'

        r.unpack()
        r.build()
        r.preInstall()
        r.install()
        r.postInstall()
        r.policy()


    def unpack(r):
        if r.externalArchive:
            r.addArchive(r.externalArchive)
        elif r.gitUrl:
            if r.gitCommit:
                r.addGitSnapshot(r.gitUrl, tag = r.gitCommit)
            else:
                r.addGitSnapshot(r.gitUrl)
            if r.autoGen:
                r.Run(r.autoGen)
        else:
            # We want '2.30.x' and not just '2.x' as major version.
            r.macros.majversion = '.'.join(r.version.split('.')[0:2])
            r.addArchive('mirror://gnome/%(name)s/%(majversion)s/')

        if r.patches:
            for patch in r.patches:
                r.addPatch(patch)

    def build(r):
        r.Configure('%s %s' % (r.gnomeExtraConfig, r.extraConfig),
                    configureName = r.configureName,
                    preConfigure = r.preConfigure)

        r.postConfigure()

        r.Make(r.makeArgs, preMake=r.preMake)

    def install(r):
        r.MakeInstall(r.makeInstallArgs, preMake=r.preMakeInstall)
        # this really needs to be the other way around, but we need
        # to find a way to automate that first.
        #r.Requires('%s:runtime' %r.macros.name,
        #                '%(libdir)s/gnome-vfs-2.0/modules/.*',
        #                '%(libdir)s/bonobo/.*',
        #                '%(libdir)s/gtk-2.0/modules/.*',
        #                '%(libdir)s/libglade/2.0/.*',
        #                '%(libdir)s/orbit-2.0/.*')
        r.Remove('%(libdir)s/gtk-2.0/modules/*.a',
                 '%(libdir)s/bonobo/*.a',
                 '%(libdir)s/libglade/2.0/*.a', allowNoMatch = True)

        # Remove any autogenerated scrollkeeper cache files.
        # Entirely disabling scrollkeeper-update when building
        # the package is preferred, either by modifying the
        # makefile, or passing an option to the configure script,
        # if such an option exists.
        r.Remove('%(localstatedir)s/lib/scrollkeeper/',
                 '%(localstatedir)s/scrollkeeper/',
                 allowNoMatch = True,
                 recursive = True)

        if r.docs:
            r.Doc(*r.docs)

        # GConf schemas should be in :data so that :lib depends on them
        r.ComponentSpec('data', '%(sysconfdir)s/gconf/schemas/')
        
        #  Don't ship icon caches
        r.Remove('%(datadir)s/icons/*/icon-theme.cache', allowNoMatch = True)

    def postConfigure(r):
        pass

    def policy(r):
        pass

    def preInstall(r):
        # save space
        # strip unneeded translations from .mo files
        # http://bugzilla.gnome.org/show_bug.cgi?id=474987
        r.Run("""
if [ -d po ] ; then 
cd po
grep -v ".*[.]desktop[.]in[.]in$\|.*[.]server[.]in[.]in$\|.*[.]schemas[.]in$" POTFILES.in > POTFILES.keep
mv POTFILES.keep POTFILES.in
intltool-update --pot
for p in *.po; do
  echo msgmerge $p %s.pot 
  msgmerge $p %s.pot > $p.out
  msgfmt -o `basename $p .po`.gmo $p.out
done

fi
""" % (r.potFileName,r.potFileName))



    def postInstall(r):
        # save some space
        r.Run("""
if [ -d %(destdir)s/%(datadir)s/gnome/help/ ]; then
   cd %(destdir)s%(datadir)s/gnome/help/;
   for helpdir in $(ls); do 
       for f in $helpdir/C/figures/*.{png,jpg}; do
           b="$(basename $f)"
           echo $b
           for d in $helpdir/*; do
               if [ -d "$d" -a "$d" != "$helpdir/C" ]; then
                  g="$d/figures/$b"
                  if [ -f "$g" ]; then
                     if cmp -s $f $g; then
                        rm "$g"; ln -s "../../C/figures/$b" "$g"
                     fi
                  fi
               fi
           done
       done
    done
fi 
""", dir = '%(destdir)s')

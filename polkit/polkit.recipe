#
# Copyright (c) 2007-2008 rPath, Inc.
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#

loadSuperClass('rpmpackage')
class PolKit(RPMPackageRecipe,AutoPackageRecipe):
    name = 'polkit'
    version = '0.101'
    rpmName = 'polkit'
    rpmRelease = '6.fc15'

    buildRequires = [ 'libtool:runtime', 'automake:runtime',
                      'autoconf:runtime', 'dbus:devel', 'pkgconfig:devel',
                      'glib:devel', 'dbus-glib:devel', 'dbus-glib:runtime',
                      'pam:devel', 'xmlto:runtime', 'expat:devel',
                      'gnome-doc-utils:devel', 'gnome-doc-utils:runtime',
                      'perl-XML-Parser:perl', 'gettext:runtime', 'intltool:runtime',
                      'eggdbus:devel', 'eggdbus:runtime', 'gtk-doc:devel',
                      'gtk-doc:runtime', 'intltool:devel',
                      'gobject-introspection:devel', 
                      ]

    rpmPatches = [
                   '0001-PolkitUnixProcess-Clarify-that-the-real-uid-is-retur.patch',
                   '0002-Make-PolkitUnixProcess-also-record-the-uid-of-the-pr.patch',
                   '0003-Use-polkit_unix_process_get_uid-to-get-the-owner-of-.patch',
                   '0004-pkexec-Avoid-TOCTTOU-problems-with-parent-process.patch']

    def configure(r):
        r.Configure(' --disable-static --libexecdir=%(libexecdir)s/polkit-1 '
                    ' --with-os-type=redhat'
                    ' --enable-introspection --enable-examples --disable-selinux --disable-gtk-doc' )

    def policy(r):
        r.ExcludeDirectories(exceptions='%(datadir)s/PolicyKit/policy')
        r.ExcludeDirectories(exceptions='%(localstatedir)s/lib/PolicyKit-public')
        r.ExcludeDirectories(exceptions='%(localstatedir)s/lib/polkit-1')


        r.SetModes('%(sysconfdir)s/polkit-1/localauthority/', 0700)
        r.Ownership('root','root', '%(sysconfdir)s/polkit-1/localauthority')
        r.ExcludeDirectories(exceptions='%(sysconfdir)s/polkit-1/.*')

        r.SetModes('%(localstatedir)s/lib/polkit-1', 0700)
        r.SetModes('%(bindir)s/pkexec', 04755)
        r.SetModes('%(libexecdir)s/polkit-1/polkit-agent-helper-1', 04755)

        for d in [ '%(localstatedir)s/lib/polkit-1/',
                   '%(localstatedir)s/lib/polkit-1/localauthority',
                   '%(localstatedir)s/lib/polkit-1/localauthority/10-vendor.d',
                   '%(localstatedir)s/lib/polkit-1/localauthority/20-org.d',
                   '%(localstatedir)s/lib/polkit-1/localauthority/30-site.d',
                   '%(localstatedir)s/lib/polkit-1/localauthority/50-local.d',
                   '%(localstatedir)s/lib/polkit-1/localauthority/90-mandatory.d']:
            r.MakeDirs(d)
            r.SetModes(d, 0700)
            r.ExcludeDirectories(exceptions = d)

            r.Copy('src/polkitagent/polkitagentenumtypes.h', '%(includedir)s/polkit-1/polkitagent')

        # TODO: Desktop admin privilege 'fix'
        # In its current form the 'fix' somewhat defeats the intent of upstream.
        #  -- /ermo
        r.Create('%(sysconfdir)s/polkit-1/localauthority.conf.d/60-desktop-admin-policy.conf',
                 contents = """
# DO NOT EDIT THIS FILE, it will be overwritten on update.
#
# This allows users in the wheel group to authenticate as
# the administrator.

[Configuration]
#AdminIdentities=unix-group:desktop_admin_r
# Use the wheel group instead and require a password.
AdminIdentities=unix-group:wheel
ResultAny=no
ResultInactive=no
ResultActive=auth_self_keep
""")
        # Even though the file lives in /etc/, let's overwrite it unconditionally
        # in order to lessen upgrade woes. -- /ermo
        r.Config(exceptions='%(sysconfdir)s/polkit-1/localauthority.conf.d/60-desktop-admin-policy.conf')

        r.Create('%(localstatedir)s/lib/polkit-1/localauthority/10-vendor.d/10-desktop-policy.pkla',
                 contents = """
# Authorizations/policy for the desktop_admin_r and desktop_user_r groups.
#
# DO NOT EDIT THIS FILE, it will be overwritten on update.

# Allow "standard users" to do some things without being interrupted by
# password dialogs (TODO: not complete)
#
[Desktop User Permissions]
Identity=unix-group:desktop_user_r
Action=org.gnome.clockapplet.mechanism.settimezone
ResultAny=no
ResultInactive=no
ResultActive=yes

# Allow "administrative users" to do a lot of things without being interrupted by
# password dialogs (TODO: not complete)
#
[Desktop Administrator Permissions]
#Identity=unix-group:desktop_admin_r
Identity=unix-group:wheel
Action=org.gnome.clockapplet.mechanism.*;org.freedesktop.devicekit.disks.*;org.freedesktop.RealtimeKit1.*
ResultAny=no
ResultInactive=no
ResultActive=yes
""")
        # In a perferct world, we would employ the principle of least privilege
        # for finer grained control of privilege escalation.
        r.UtilizeGroup('desktop_user_r', '%(bindir)s/pkexec')
        r.UtilizeGroup('desktop_admin_r', '%(bindir)s/pkexec')

        # allows x86 and x86_64 :lib co-existence
        r.ComponentSpec(':runtime', '%(localstatedir)s/lib/misc/PolicyKit.reload')

        # devel stuff
        r.ComponentSpec('devel', 
                        '%(bindir)s/pk-example-frobnicate',
                        '%(datadir)s/polkit-1/actions/org.freedesktop.policykit.examples.pkexec.policy',
                        '%(libdir)s/lib*.so',
                        '%(datadir)s/gir-1.0/*.gir')

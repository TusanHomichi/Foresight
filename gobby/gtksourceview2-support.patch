Index: /gobby/trunk/src/preferencesdialog.cpp
===================================================================
--- /gobby/trunk/src/preferencesdialog.cpp (revision 1623)
+++ /gobby/trunk/src/preferencesdialog.cpp (revision 1663)
@@ -350,12 +350,17 @@
 {
 #ifdef WITH_GTKSOURCEVIEW2
-	const GSList* list =
-		gtk_source_language_manager_list_languages(lang_mgr);
+	GSList* languages = NULL;
+	const gchar* const* ids = gtk_source_language_manager_get_language_ids(lang_mgr);
+	for(const gchar* const* id = ids; *id != NULL; ++ id)
+	{
+		GtkSourceLanguage* language = gtk_source_language_manager_get_language(lang_mgr, *id);
+		languages = g_slist_prepend(languages, language);
+	}
 #else
 	const GSList* list =
 		gtk_source_languages_manager_get_available_languages(lang_mgr);
+	GSList* languages = g_slist_copy(const_cast<GSList*>(list));
 #endif
 
-	GSList* languages = g_slist_copy(const_cast<GSList*>(list));
 	languages = g_slist_sort(languages, &lang_sort);
 
@@ -521,11 +526,11 @@
 {
 #ifdef WITH_GTKSOURCEVIEW2
-	const GSList* list =
-		gtk_source_language_manager_list_languages(m_lang_mgr);
+	const gchar* const* ids = gtk_source_language_manager_get_language_ids(m_lang_mgr);
 
 	GtkSourceLanguage* lang = NULL;
-	for(; list != NULL; list = list->next)
-	{
-		GtkSourceLanguage* language = GTK_SOURCE_LANGUAGE(list->data);
+	for(const gchar* const* id = ids; *id != NULL; ++ id)
+	{
+		GtkSourceLanguage* language = gtk_source_language_manager_get_language(m_lang_mgr, *id);
+
 		gchar** mime_types = gtk_source_language_get_mime_types(language);
 		for(gchar** mime_type = mime_types; *mime_type != NULL; ++ mime_type)
Index: /gobby/trunk/src/header.cpp
===================================================================
--- /gobby/trunk/src/header.cpp (revision 1623)
+++ /gobby/trunk/src/header.cpp (revision 1663)
@@ -98,5 +98,5 @@
 
 			// Not an ASCII character, or a dangerous one?
-			if(c == '<' || c == '>' || c == '\"' || c > 0x7f)
+			if(c == '<' || c == '>' || c == '\"' || c > 0x7f || Glib::Unicode::isspace(c))
 			{
 				// Get next iter to find the end position
@@ -611,13 +611,19 @@
 	// Get available languages
 #ifdef WITH_GTKSOURCEVIEW2
-	const GSList* list = gtk_source_language_manager_list_languages(
-		lang_mgr);
+	GSList* lang_list = NULL;
+	const gchar* const* ids = gtk_source_language_manager_get_language_ids(lang_mgr);
+	for(const gchar* const* id = ids; *id != NULL; ++ id)
+	{
+		GtkSourceLanguage* language = gtk_source_language_manager_get_language(lang_mgr, *id);
+		lang_list = g_slist_prepend(lang_list, language);
+	}
 #else
 	const GSList* list = gtk_source_languages_manager_get_available_languages(
 		lang_mgr);
+
+	// Copy the list, so we can sort languages by name
+	GSList* lang_list = g_slist_copy(const_cast<GSList*>(list));
 #endif
 
-	// Copy the last, so we can sort languages by name
-	GSList* lang_list = g_slist_copy(const_cast<GSList*>(list));
 	lang_list = g_slist_sort(lang_list, &language_sort_callback);
 
Index: /gobby/trunk/src/docwindow.cpp
===================================================================
--- /gobby/trunk/src/docwindow.cpp (revision 1623)
+++ /gobby/trunk/src/docwindow.cpp (revision 1663)
@@ -17,10 +17,11 @@
  */
 
+#include "features.hpp"
+
 #include <glibmm/pattern.h>
 #include <gtkmm/textview.h>
 
-#include "features.hpp"
 #ifdef WITH_GTKSOURCEVIEW2
-# include <gtksourceview/gtksourcestylemanager.h>
+# include <gtksourceview/gtksourcebuffer.h>
 #endif
 
@@ -70,5 +71,5 @@
 
 	// Set source language by filename
-	gtk_source_buffer_set_highlight(buffer, FALSE);
+	gtk_source_buffer_set_highlight_syntax(buffer, FALSE);
 
 	for(Preferences::FileList::iterator iter = preferences.files.begin();
@@ -80,5 +81,5 @@
 		{
 			gtk_source_buffer_set_language(buffer, iter.language());
-			gtk_source_buffer_set_highlight(buffer, TRUE);
+			gtk_source_buffer_set_highlight_syntax(buffer, TRUE);
 		}
 	}
@@ -88,8 +89,8 @@
 	// TODO: This should be temporary code until gtksourceview2 sets a default
 	// theme.
-	GtkSourceStyleManager* sm = gtk_source_style_manager_new();
+/*	GtkSourceStyleManager* sm = gtk_source_style_manager_new();
 	GtkSourceStyleScheme* scheme = gtk_source_style_manager_get_scheme(sm, "gvim");
 	gtk_source_buffer_set_style_scheme(buffer, scheme);
-	g_object_unref(G_OBJECT(sm));
+	g_object_unref(G_OBJECT(sm));*/
 #endif
 
@@ -225,5 +226,5 @@
 
 	gtk_source_buffer_set_language(buffer, language);
-	gtk_source_buffer_set_highlight(buffer, language != NULL);
+	gtk_source_buffer_set_highlight_syntax(buffer, language != NULL);
 
 	m_signal_language_changed.emit();
@@ -343,5 +344,5 @@
 	GtkTextBuffer* buffer = gtk_text_view_get_buffer(GTK_TEXT_VIEW(m_view));
 
-	gtk_source_view_set_tabs_width(GTK_SOURCE_VIEW(m_view),
+	gtk_source_view_set_tab_width(GTK_SOURCE_VIEW(m_view),
 		m_preferences.editor.tab_width);
 	gtk_source_view_set_insert_spaces_instead_of_tabs(GTK_SOURCE_VIEW(m_view),
@@ -365,9 +366,9 @@
 	gtk_source_view_set_highlight_current_line(GTK_SOURCE_VIEW(m_view),
 		m_preferences.view.curline_highlight);
-	gtk_source_view_set_show_margin(GTK_SOURCE_VIEW(m_view),
+	gtk_source_view_set_show_right_margin(GTK_SOURCE_VIEW(m_view),
 		m_preferences.view.margin_display);
-	gtk_source_view_set_margin(GTK_SOURCE_VIEW(m_view),
+	gtk_source_view_set_right_margin_position(GTK_SOURCE_VIEW(m_view),
 		m_preferences.view.margin_pos);
-	gtk_source_buffer_set_check_brackets(GTK_SOURCE_BUFFER(buffer),
+	gtk_source_buffer_set_highlight_matching_brackets(GTK_SOURCE_BUFFER(buffer),
 		m_preferences.view.bracket_highlight);
 
Index: /gobby/trunk/src/preferences.cpp
===================================================================
--- /gobby/trunk/src/preferences.cpp (revision 1641)
+++ /gobby/trunk/src/preferences.cpp (revision 1663)
@@ -33,13 +33,16 @@
 	{
 #ifdef WITH_GTKSOURCEVIEW2
-		const GSList* list =
-			gtk_source_language_manager_list_languages(manager);
-
-		for(; list != NULL; list = list->next)
+		const gchar* const* ids = gtk_source_language_manager_get_language_ids(manager);
+
+		for(const gchar* const* id = ids; *id != NULL; ++ id)
 		{
+			GtkSourceLanguage* language = gtk_source_language_manager_get_language(manager, *id);
+			g_assert(language != NULL);
+
 			gchar** mime_types =
 				gtk_source_language_get_mime_types(
-					GTK_SOURCE_LANGUAGE(list->data)
+					GTK_SOURCE_LANGUAGE(language)
 				);
+
 			if(mime_types != NULL)
 			{
@@ -49,5 +52,5 @@
 					{
 						g_strfreev(mime_types);
-						return GTK_SOURCE_LANGUAGE(list->data);
+						return language;
 					}
 				}
@@ -252,10 +255,10 @@
 	{
 #ifdef WITH_GTKSOURCEVIEW2
-		const GSList* list = gtk_source_language_manager_list_languages(
-			lang_mgr);
-
-		for(; list != NULL; list = list->next)
+		const gchar* const* ids = gtk_source_language_manager_get_language_ids(lang_mgr);
+
+		for(const gchar* const* id = ids; *id != NULL; ++ id)
 		{
-			GtkSourceLanguage* language = GTK_SOURCE_LANGUAGE(list->data);
+			GtkSourceLanguage* language = gtk_source_language_manager_get_language(lang_mgr, *id);
+
 			gchar** globs = gtk_source_language_get_globs(language);
 			if(globs != NULL)
Index: /gobby/trunk/ChangeLog
===================================================================
--- /gobby/trunk/ChangeLog (revision 1662)
+++ /gobby/trunk/ChangeLog (revision 1663)
@@ -1,2 +1,10 @@
+2007-09-17  Armin Burgmeier  <armin@0x539.de>
+
+	* src/preferencesdialog.cpp:
+	* src/header.cpp:
+	* src/docwindow.cpp:
+	* src/preferences.cpp: Adapted to latest (and final) GtkSourceView2
+	API.
+
 2007-08-27  Armin Burgmeier  <armin@0x539.de>
 
@@ -2653,3 +2661,2 @@
 
 	Empty gobby window
-

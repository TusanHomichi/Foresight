--- rhpl-0.143/src/mouse.py.orig	2004-08-06 16:09:56.000000000 -0400
+++ rhpl-0.143/src/mouse.py	2004-08-06 16:10:17.000000000 -0400
@@ -21,73 +21,93 @@
 translate.textdomain('rhpl')
 
 class Mouse (SimpleConfigFile):
-    mouseModels = {
-        # (shortname: make, model, gpm protocol, X protocol, input protocol, device, emulate3)
-        "ascii": (N_("ASCII"), N_("MieMouse (serial)"),
-                  "ms3", "IntelliMouse", "ms3", "ttyS", 0),
-        "generic": (N_("Generic"), N_("2 Button Mouse (serial)"),
-                    "Microsoft", "Microsoft", "bare", "ttyS", 1),
-        "generic3": (N_("Generic"), N_("3 Button Mouse (serial)"),
-                     "Microsoft", "Microsoft", "ms", "ttyS", 0),
-        "genericps/2": (N_("Generic"), N_("2 Button Mouse (PS/2)"),
-                        "imps2", "IMPS/2", None, "input/mice", 1),
-        "generic3ps/2": (N_("Generic"), N_("3 Button Mouse (PS/2)"),
-                         "imps2", "IMPS/2", None, "input/mice", 0),
-        "genericwheelps/2": (N_("Generic"), N_("Wheel Mouse (PS/2)"),
-                             "imps2", "IMPS/2", None, "input/mice", 0),
-        "genericusb": (N_("Generic"), N_("2 Button Mouse (USB)"),
-                       "imps2", "IMPS/2", None, "input/mice", 1),
-        "generic3usb": (N_("Generic"), N_("3 Button Mouse (USB)"),
-                        "imps2", "IMPS/2", None, "input/mice", 0),
-        "genericwheelusb": (N_("Generic"), N_("Wheel Mouse (USB)"),
-                            "imps2", "IMPS/2", None, "input/mice", 0),
-        "geniusnm": (N_("Genius"), N_("NetMouse (serial)"),
-                     "ms3", "IntelliMouse", "ms3", "ttyS", 1),
-        "thinking": (N_("Kensington"), N_("Thinking Mouse (serial)"),
-                     "Microsoft", "ThinkingMouse", "bare", "ttyS", 1),
-        "logitech": (N_("Logitech"), N_("C7 Mouse (serial, old C7 type)"),
-                     "Logitech", "Logitech", "mman", "ttyS", 0),
-        "logitechcc": (N_("Logitech"), N_("CC Series (serial)"),
-                       "logim", "MouseMan", "mman", "ttyS", 0),
-        "logimman": (N_("Logitech"), N_("MouseMan/FirstMouse (serial)"),
-                     "MouseMan", "MouseMan", "mman", "ttyS", 0),
-        "logimman+": (N_("Logitech"), N_("MouseMan+/FirstMouse+ (serial)"),
-                      "pnp", "IntelliMouse", "ms3", "ttyS", 0),
-        "microsoft": (N_("Microsoft"), N_("Compatible Mouse (serial)"),
-                      "Microsoft", "Microsoft", "bare", "ttyS", 1), 
-        "msnew": (N_("Microsoft"), N_("Rev 2.1A or higher (serial)"),
-                  "pnp", "Auto", "ms", "ttyS", 1), 
-        "msintelli": (N_("Microsoft"), N_("IntelliMouse (serial)"),
-                      "ms3", "IntelliMouse", "ms3", "ttyS", 0),
-        "mousesystems": (N_("Mouse Systems"), N_("Mouse (serial)"),
-                         "MouseSystems", "MouseSystems", "msc", "ttyS", 1),
-        "mmseries": (N_("MM"), N_("MM Series (serial)"),
-                     "MMSeries", "MMSeries", "bare", "ttyS", 1),
-        "mmhittab": (N_("MM"), N_("MM HitTablet (serial)"),
-                     "MMHitTab", "MMHittab", "bare", "ttyS", 1),
-        "none": ("No", "mouse" , "none", "none", None, None, 0),
-        "sun": (N_("Sun"), N_("Mouse"), "sun", "sun", "sun", "sunmouse", 0)
+    mice = {
+        # (gpm protocol, X protocol, device, emulate3, shortname)
+        N_("ALPS - GlidePoint (PS/2)"):
+        ("ps/2", "GlidePointPS/2", "psaux", 1, "alpsps/2"),
+	N_("ASCII - MieMouse (serial)"):
+        ("ms3", "IntelliMouse", "ttyS", 0, "ascii"),
+	N_("ASCII - MieMouse (PS/2)"):
+        ("ps/2", "NetMousePS/2", "psaux", 1, "asciips/2"),
+	N_("ATI - Bus Mouse"):
+        ("Busmouse", "BusMouse", "atibm", 1, "atibm"),
+	N_("Generic - 2 Button Mouse (serial)"):
+        ("Microsoft", "Microsoft", "ttyS", 1, "generic"),
+	N_("Generic - 3 Button Mouse (serial)"):
+        ("Microsoft", "Microsoft", "ttyS", 0, "generic3"),
+	N_("Generic - 2 Button Mouse (PS/2)"):
+        ("ps/2", "PS/2", "psaux", 1, "genericps/2"),
+	N_("Generic - 3 Button Mouse (PS/2)"):
+        ("ps/2", "PS/2", "psaux", 0, "generic3ps/2"),
+	N_("Generic - Wheel Mouse (PS/2)"):
+        ("imps2", "IMPS/2", "psaux", 0, "genericwheelps/2"),
+	N_("Generic - 2 Button Mouse (USB)"):
+        ("imps2", "IMPS/2", "input/mice", 1, "genericusb"),
+	N_("Generic - 3 Button Mouse (USB)"):
+        ("imps2", "IMPS/2", "input/mice", 0, "generic3usb"),
+	N_("Generic - Wheel Mouse (USB)"):
+        ("imps2", "IMPS/2", "input/mice", 0, "genericwheelusb"),
+	N_("Genius - NetMouse (serial)"):
+        ("ms3", "IntelliMouse", "ttyS", 1, "geniusnm"),
+	N_("Genius - NetMouse (PS/2)"):
+        ("netmouse", "NetMousePS/2", "psaux", 1, "geniusnmps/2"),
+	N_("Genius - NetMouse Pro (PS/2)"):
+        ("netmouse", "NetMousePS/2", "psaux", 1, "geniusprops/2"),
+	N_("Genius - NetScroll (PS/2)"):
+        ("netmouse", "NetScrollPS/2", "psaux", 1, "geniusscrollps/2"),
+	N_("Genius - NetScroll+ (PS/2)") :
+        ("netmouse", "NetMousePS/2", "psaux", 0, "geniusscrollps/2+"),
+	N_("Kensington - Thinking Mouse (serial)"):
+        ("Microsoft", "ThinkingMouse", "ttyS", 1, "thinking"),
+	N_("Kensington - Thinking Mouse (PS/2)"):
+        ("ps/2", "ThinkingMousePS/2", "psaux", 1, "thinkingps/2"),
+	N_("Logitech - C7 Mouse (serial, old C7 type)"):
+        ("Logitech", "Logitech", "ttyS", 0, "logitech"),
+	N_("Logitech - CC Series (serial)"):
+        ("logim", "MouseMan", "ttyS", 0, "logitechcc"),
+	N_("Logitech - Bus Mouse"):
+        ("Busmouse", "BusMouse", "logibm", 0, "logibm"),
+	N_("Logitech - MouseMan/FirstMouse (serial)"):
+        ("MouseMan", "MouseMan", "ttyS", 0, "logimman"),
+	N_("Logitech - MouseMan/FirstMouse (PS/2)"):
+        ("ps/2", "PS/2", "psaux", 0, "logimmanps/2"),
+	N_("Logitech - MouseMan+/FirstMouse+ (serial)"):
+        ("pnp", "IntelliMouse", "ttyS", 0, "logimman+"),
+        N_("Logitech - MouseMan+/FirstMouse+ (PS/2)"):
+        ("ps/2", "MouseManPlusPS/2", "psaux", 0, "logimman+ps/2"),
+	N_("Logitech - MouseMan Wheel (USB)"):
+        ("ps/2", "IMPS/2", "input/mice", 0, "logimmusb"),
+	N_("Microsoft - Compatible Mouse (serial)"):
+        ("Microsoft", "Microsoft", "ttyS", 1, "microsoft"),
+	N_("Microsoft - Rev 2.1A or higher (serial)"):
+        ("pnp", "Auto", "ttyS", 1, "msnew"),
+	N_("Microsoft - IntelliMouse (serial)"):
+        ("ms3", "IntelliMouse", "ttyS", 0, "msintelli"),
+	N_("Microsoft - IntelliMouse (PS/2)"):
+        ("imps2", "IMPS/2", "psaux", 0, "msintellips/2"),
+        
+	N_("Microsoft - IntelliMouse (USB)"):
+        ("ps/2", "IMPS/2", "input/mice", 0, "msintelliusb"),
+        
+	N_("Microsoft - Bus Mouse"):
+        ("Busmouse", "BusMouse", "inportbm", 1, "msbm"),
+	N_("Mouse Systems - Mouse (serial)"):
+        ("MouseSystems", "MouseSystems", "ttyS", 1, "mousesystems"), 
+	N_("MM - Series (serial)"):
+        ("MMSeries", "MMSeries", "ttyS", 1, "mmseries"),
+	N_("MM - HitTablet (serial)"):
+        ("MMHitTab", "MMHittab", "ttyS", 1, "mmhittab"),
+        "No - mouse" :
+                ("none", "none", None, 0, "none"),
+	N_("Sun - Mouse"): ("sun", "sun", "sunmouse", 0, "sun"),
 	}
-
-    # note that mice is deprecated; things shouldn't be accessing it directly
-    # but, to keep things simpler for now, we'll keep it around
-    mice = {}
-    for (key, val) in mouseModels.items():
-        shortname = key
-        try:
-            (make, model, gpmproto, xproto, iproto, device, emulate3) = val
-        except Exception, e:
-            log("invalid mouse desecription for %s: %s" %(key,e))
-            continue
-	newkey = "%s - %s" % (make, model)
-        mice[newkey] = (gpmproto, xproto, iproto, device, emulate3, shortname)
     
     
     def mouseToMouse(self):
         types = {}
-        for (type, val) in self.mouseModels.items():
-            (make, model, gpmproto, xproto, iproto, device, emulate3) = val
-            types[type] = "%s - %s" % (make, model)
+        for mouse in self.mice.keys():
+            mouseType = self.mice[mouse][4]
+            types[mouseType] = mouse
         return types
         
 
@@ -95,9 +115,8 @@
     def __init__ (self, skipProbe = 0):
         self.info = {}
         self.device = None
-        self.mousetype = None
         self.emulate = 0
-        self.setMouse ("generic3ps/2")
+        self.set ("Generic - 3 Button Mouse (PS/2)")
 	self.wasProbed = 0
 	self.probedList = None
 
@@ -138,29 +157,44 @@
 	self.probedList = list
 
         if (list):
-	    l = list[0]
+	    #
+	    # XXX ugly hack - the way we handle USB mice on a machine
+	    #                 with a non-USB mouse depends on the
+	    #                 non-USB mouse being the 'default'
+	    for l in list:
+		(device, module, desc) = l
+		if device != "input/mice":
+		    break
             
-            if l.device == "sunmouse":
-                self.setMouse("sun", 0)
-	    elif l.bus == kudzu.BUS_PSAUX:
-		# synaptics bits go here
-                if l.driver == "msintellips/2":
-                    self.setMouse("genericwheelps/2", 0)
+            if frob and device == 'psaux':
+            # jumpstart some ps/2 mice.  Blame the kernel
+                try:
+                    f = open ('/dev/psaux')
+                    f.write ('1')
+                    f.close()
+                except:
+                    pass
+
+            if device == "sunmouse":
+                self.set("Sun - Mouse", 0)
+            elif device == "psaux":
+                if module == "msintellips/2":
+                    self.set("Generic - Wheel Mouse (PS/2)", 0)
                 else:
-                    self.setMouse("generic3ps/2",0)
-            elif l.bus == kudzu.BUS_USB:
-                if l.driver == "generic3usb" or l.driver == "mousedev":
-                    self.setMouse("generic3usb", 0)
-                elif l.driver == "genericusb":
-                    self.setMouse("genericusb", 1)
+                    self.set("Generic - 3 Button Mouse (PS/2)", 0)
+            elif device == "input/mice":
+                if module == "generic3usb" or module == "mousedev":
+                    self.set("Generic - 3 Button Mouse (USB)", 0)
+                elif module == "genericusb":
+                    self.set("Generic - 2 Button Mouse (USB)", 1)
             else:
-                self.setMouse("generic", 1)
+                self.set("Generic - 2 Button Mouse (serial)", 1)
 
-            self.device = l.device
+            self.device = device
 	    self.wasProbed = 1
             return 1
         else:
-            self.setMouse("none")
+            self.set("No - mouse")
 	    self.device = None
 	    self.wasProbed = 0
             return 0
@@ -171,9 +205,6 @@
     def get (self):
 	return (self.info ["FULLNAME"], self.emulate)
 
-    def getMouse (self):
-        return (self.mousetype, self.emulate)
-
     def __str__(self):
 	if (self.emulate):
 	    self.info["XEMU3"] = "yes"
@@ -201,21 +232,10 @@
     def setDevice(self, device):
 	self.device = device
 
-    def set (self, mouse = None, emulateThreeButtons = -1, thedev = None):
-        (gpm, x11, inp, dev, em, shortname) = self.mice[mouse]
-        self.setMouse(shortname, emulateThreeButtons, thedev)
-
-    def setMouse (self, shortname, emul = -1, thedev = None):
-        (make, model, gpm, x11, inp, dev, em) = self.mouseModels[shortname]
-        mouse = "%s - %s" % (make, model)
-
-        emulateThreeButtons = emul
-
-        self.mousetype = shortname
+    def set (self, mouse, emulateThreeButtons = -1, thedev = None):
+        (gpm, x11, dev, em, shortname) = self.mice[mouse]
         self.info["MOUSETYPE"] = gpm
         self.info["XMOUSETYPE"] = x11
-	if inp:
-	    self.info["IMOUSETYPE"] = inp
         self.info["FULLNAME"] = mouse
         if emulateThreeButtons != -1:
             self.emulate = emulateThreeButtons
@@ -226,6 +246,45 @@
 	if not self.device:
             self.device = dev
 
+    def setXProtocol (self):
+        import xmouse
+        try:
+            curmouse = xmouse.get()
+        except RuntimeError:
+            # ignore errors when switching mice
+            return None
+
+        # copy the current mouse settings
+        newmouse = curmouse[:]
+
+	if self.device is not None:
+	    newmouse[0] = "/dev/" + self.device
+	else:
+	    newmouse[0] = None
+	    
+        # XXX
+        # IntelliMouse requires a full mouse reinit - X does not
+        # handle this properly from the mouse extention at this time
+        # so leave it alone
+        if (not self.info["XMOUSETYPE"] == "IMPS/2"
+            and not self.info["XMOUSETYPE"] == "IntelliMouse"
+            and not self.info["XMOUSETYPE"] == "NetMousePS/2"
+            and not self.info["XMOUSETYPE"] == "None"
+            and not self.info["XMOUSETYPE"] == "none"):
+            newmouse[1] = self.info["XMOUSETYPE"]
+
+#        newmouse[6] = self.emulate
+        # don't tweak X if the device and protocol have not changed
+        if newmouse[0] == curmouse[0] and newmouse[1] == curmouse[1]:
+            return
+
+        try:
+            apply (xmouse.set, newmouse)
+        except RuntimeError:
+            pass
+        except TypeError:
+            pass
+
     def read(self, instPath = "/"):
         SimpleConfigFile.read(self, instPath + "/etc/sysconfig/mouse")
         self.beenset = 1
@@ -263,9 +322,6 @@
 
 # maybe doesnt belong here - just ask user what mouse they have on
 # startup if kudzu didn't find one
-#
-# return 0 to use text mode, 1 if user picked a mouse, -1 if they want to
-# retry mouse type probe
 def mouseWindow(mouse):
     from snack import ButtonChoiceWindow, SnackScreen
     from mouse_text import MouseWindow, MouseDeviceWindow
@@ -289,42 +345,17 @@
     step = 0
     while step < STEP_DONE:
         if step == STEP_MESSAGE:
-
-#
-# USE USB MOUSE SUPPORT BUILT INTO BOOT KERNEL
-#
-            if 0:
-               button = ButtonChoiceWindow(screen, _("Mouse Not Detected"),
-                               _("Your mouse was not automatically "
-                               "detected.  To proceed in the graphical "
-                               "installation mode, please proceed to "
-                               "the next screen and provide your mouse "
-                               "information. You may also use text mode "
-                               "installation which does not require a mouse. "
- 			      "Optionally you can have the system probe "
- 			      "for a mouse again."),
-                               buttons = [ _("OK"), _("Scan for mouse"),
- 					  _("Use text mode") ])
-#
-# OTHERWISE USE THIS
-#
-            else:
-                button = ButtonChoiceWindow(screen, _("Mouse Not Detected"),
-                             _("Your mouse was not automatically "
-                               "detected.  To proceed in the graphical "
-                               "installation mode, please proceed to "
-                               "the next screen and provide your mouse "
-                               "information. You may also use text mode "
-                               "installation which does not require a mouse. "),
-                               buttons = [ _("OK"), _("Use text mode") ])
-
-	    
-	    if button == string.lower (_("Use text mode")):
-                screen.finish()
+            button = ButtonChoiceWindow(screen, _("Mouse Not Detected"),
+                            _("Your mouse was not automatically "
+                              "detected.  To proceed in the graphical "
+                              "installation mode, please proceed to "
+                              "the next screen and provide your mouse "
+                              "information. You may also use text mode "
+                              "installation which does not require a mouse."),
+                              buttons = [ _("OK"), _("Use text mode") ])
+            if button == string.lower (_("Use text mode")):
+                screen.finish ()
                 return 0
-	    elif button == string.lower(_("Scan for mouse")):
-		screen.finish()
-		return -1
             else:
                 step = STEP_TYPE
                 continue

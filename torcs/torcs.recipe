class Torcs(CPackageRecipe):
    name = "torcs"
    version = "1.3.1"
    buildRequires =  [ 'freeglut:devel', 'gcc:devel', 'libpng:devel',
                       'openal:devel', 'zlib:devel',
                       'gcc:devel', 'desktop-file-utils:runtime', 'Mesa:devel', 'freealut:devel', 'libICE:devel', 'libSM:devel', 'libX11:devel', 'libXext:devel', 'libXi:devel', 'libXmu:devel', 'libXrandr:devel', 'libXrender:devel', 'libXt:devel', 'libXxf86vm:devel', 'libstdc++:devel', 'plib:devel', 'python:bin' ]

    def setup(r):
        r.addArchive('http://garr.dl.sourceforge.net/sourceforge/%(name)s/%(name)s-%(version)s.tar.bz2')
	if Arch.x86_64: r.macros.cflags = ' '
        r.addSource('torcs.desktop')
        r.addSource('torcs.png')
        r.Desktopfile ('torcs.desktop')
        r.Install('torcs.png','%(datadir)s/pixmaps/torcs.png')
	if Arch.x86_64: r.macros.cflags += ' -fPIC'
        r.Configure('--x-libraries=%(libdir)s --x-includes=%(includedir)s/X11/')
        r.Make()
        r.MakeInstall()
        r.Make("datainstall", preMake='DESTDIR=%(destdir)s')
        r.macros.ldflags += ' -L%(libdir)s/xorg.mesa.3d/ '
        for lib in [ 'libclient.so', 'libconfscreens.so', 'liblearning.so',
                     'libraceengine.so', 'libracescreens.so',
                     'librobottools.so', 'libtgf.so', 'libtgfclient.so',
                     'libtxml.so' ]:
            r.Provides('soname:' + lib, '%(libdir)s/torcs/lib/' + lib)

#
# Copyright (c) 2004-2008 rPath, Inc.
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#

#loadSuperClass('rpmpackage')
class Httpd(CPackageRecipe):
    name = 'httpd'
    version = '2.2.27'

    buildRequires = [ 'db:devel', 'expat:devel', 'findutils:runtime',
                      'perl:runtime', 'pkgconfig:devel', 'e2fsprogs:devel',
                      'xmlto:runtime', 'autoconf:runtime', 'krb5:devel',
                      'apr:devel', 'openldap:devel', 'sed:runtime',
                      'apr-util:devel', 'pcre:devel', 'rsync:runtime',
                      'distcache:devel', 'ed:runtime', 'sqlite:devel',
                      'openssl:devel', 'zlib:devel', 'libtool:runtime',
                      'which:runtime', 'openssl:runtime', 'perl:devel',
                      'lynx:runtime', 'initscripts:runtime',
                      'apr:devellib', 'util-linux:devel' ]

    # httpd has a runtime req on mailcap:config, adding it as a buildreq to
    # work around issues in rmake.
    buildRequires.append('mailcap:config')

    # srpm = 'ftp://ftp.redhat.com/redhat/linux/enterprise/5Server/en/os/SRPMS/httpd-2.2.3-76.el5_9.src.rpm'
    srpm = 'http://koji.rutgers.edu/packages/httpd/2.2.24/1.ru6/src/httpd-2.2.24-1.ru6.src.rpm'
    def setup(r):
        r.addArchive('http://archive.apache.org/dist/httpd/')
        r.macros.contentdir = '%(servicedir)s/www'
        r.macros.suexec_caller = 'apache'
        r.macros.mmn = '20051115'
        r.macros.vstring = 'rPath'
        r.macros.distro = 'Foresight Linux'
        r.macros.htconfdir = '%(sysconfdir)s/httpd'
        #        r.macros.cflags += " -DSSL_EXPERIMENTAL_ENGINE -fno-strict-aliasing "
        r.macros.cflags += " -fno-strict-aliasing "
        # point to the correct libtool
        r.macros.apr_libtool = "$(apr-1-config --apr-libtool | sed -e 's|/bin/sh ||')"
        r.macros.oldapachedir = '/usr/local/apache2'
        r.macros.cflags += " $(pkg-config --cflags openssl)"
        r.macros.ssl_libs = " $(pkg-config --libs openssl)"

        r.Environment('SH_LDFLAGS', '-Wl,-z,relro')

        r.addSource("Makefile.ssl")
        r.addSource("modssl-req.conf")

        r.addSource('index.html')
        r.addSource('httpd.logrotate', rpm=r.srpm)
        r.addSource("httpd.init.patch", macros=True)
        r.addSource('httpd.init', rpm=r.srpm,)
#                    apply="patch httpd.init httpd.init.patch")
        r.addSource('httpd.conf', rpm=r.srpm)
        r.addSource('ssl.conf', rpm=r.srpm,
                    apply="sed -i -e 's,/etc/pki/tls,/etc/ssl,g' ssl.conf")
        r.addSource('welcome.conf', rpm=r.srpm)

        r.addSource('README.confd', rpm=r.srpm)


        r.addSource('httpd-2.0.48-release.patch', rpm=r.srpm)
        r.addPatch('config.layout.rpath', level=0, macros=True)
        r.addPatch('httpd.conf.openoffice.patch', backup='.openoffice')

        
        # Unmodified patches from 'RHEL6'ified 2.2.x
        # (taken from http://koji.rutgers.edu/koji/buildinfo?buildID=2934')
        for patch in [ 'httpd-2.1.10-apctl.patch',
                       'httpd-2.1.10-apxs.patch',
                       'httpd-2.2.9-deplibs.patch',
                       'httpd-2.1.10-disablemods.patch',
                       'httpd-2.1.10-layout.patch',
                        ]: 
            r.addPatch(patch, rpm=r.srpm)

        r.addPatch('condgraceful.patch')

        r.Replace(r'@RELEASE@', '%(vstring)s', 'httpd-2.0.48-release.patch')
        r.Run('patch -p1 < httpd-2.0.48-release.patch')

        r.Replace('/var', '%(servicedir)s', 'httpd.conf')

        # Touch mod_ssl expression parser sources to prevent regenerating it
        r.Run("touch modules/ssl/ssl_expr_*.[chyl]")

        # Safety check: prevent build if defined MMN does not equal upstream MMN
        r.Run("""
        vmmn=`echo MODULE_MAGIC_NUMBER_MAJOR | cpp -include include/ap_mmn.h | sed -n '/^2/p'`
        if test "${vmmn}" != "%(mmn)s"; then
           echo Error: Upstream MMN is now ${vmmn}, packaged MMN is %(mmn)s.
           echo Update the mmn macro and rebuild.
           exit 1
        fi""")


        r.Run("echo Building for '%(distro)s' with MMN %(mmn)s and vendor string '%(vstring)s'")
        r.Run('./buildconf')
        # forcibly prevent use of bundled apr, apr-util, pcre
        r.Remove('srclib/{apr,apr-util,pcre}', recursive=True)

        # enable optional modules only for main build
        r.mpmbuild('prefork',
                   ' --enable-mods-shared=all'
                   ' --enable-ssl'
                   ' --with-ssl'
                   ' --enable-distcache'
                   ' --enable-proxy'
                   ' --enable-cache'
                   ' --enable-mem-cache'
                   ' --enable-file-cache'
                   ' --enable-disk-cache'
                   ' --enable-disk-cache'
                   ' --enable-deflate'
                   ' --enable-proxy-connect'
                   ' --enable-proxy-http'
                   ' --enable-proxy-ftp'
                   ' --enable-ldap'
                   ' --enable-auth-ldap'
                   ' --enable-pie'
                   ' --with-pcre'
                   ' --enable-logio'
                   ' --enable-so'
                   ' --enable-cgid'
                   ' --enable-authn-anon'
                   ' --enable-authn-alias'
                   ' --enable-authnz-ldap'
        )

        # To prevent most modules being built statically into httpd.worker,
        # easiest way seems to be enable them shared.
        r.mpmbuild('worker', '--enable-mods-shared=all')

        # Verify that the same modules were built into the two httpd binaries
        r.Run('./prefork/httpd -l | grep -v prefork > prefork.mods')
        r.Run('./worker/httpd -l | grep -v worker > worker.mods')
        r.Run('''if ! diff -u prefork.mods worker.mods; then
          echo Different modules built into httpd binaries, will not proceed
          exit 1
        fi''')

        r.MakeInstall(dir='prefork')
        # install worker binary
        r.Install('worker/httpd', '%(sbindir)s/httpd.worker', mode=0755)
        # install conf file/directory
        r.Install('README.confd', '%(sysconfdir)s/httpd/conf.d/README')
        r.Install('welcome.conf', '%(sysconfdir)s/httpd/conf.d/')
        r.Install('httpd.conf', '%(htconfdir)s/conf/')

        # modssl tasks
        r.Install('ssl.conf', '%(sysconfdir)s/httpd/conf.d/')
        # create a prototype session cache, zero-byte config files
        # never put data in these files in the recipe!
        r.Create('%(localstatedir)s/cache/mod_ssl/scache.{dir,pag,sem}')
        r.Config('%(localstatedir)s/cache/mod_ssl/scache.(dir|pag|sem)')
        # self signed certificate generation
        r.MakeDirs("%(sysconfdir)s/ssl/pem")
        r.Install('Makefile.ssl', "%(sysconfdir)s/ssl/pem/Makefile")
        r.Install("modssl-req.conf", "%(sysconfdir)s/ssl/pem/")

        # for holding mod_dav lock database
        r.MakeDirs('%(localstatedir)s/lib/dav')
        r.ComponentSpec('runtime', '%(localstatedir)s/lib/dav')

        # create cache root
        r.MakeDirs('%(localstatedir)s/cache/mod_proxy')

        # move utilities to /usr/bin
        r.Move('%(sbindir)s/{ab,htdbm,logresolve,htpasswd,htdigest}',
               '%(bindir)s/')

        # Make the MMN accessible to module packages
        r.Run('echo %(mmn)s > %(destdir)s%(includedir)s/httpd/.mmn')
        r.Install('prefork/build/config_vars.mk',
                  '%(libdir)s/httpd/build/config_vars.mk')
        r.Install('build/special.mk', '%(libdir)s/httpd/build/special.mk')
        # Symlink won't work because %(apr_libtool) is a shell script
        r.Run('ln -s %(apr_libtool)s'
              ' %(destdir)s/%(libdir)s/httpd/build/libtool')

        r.Install('index.html', '%(contentdir)s/error/noindex.html')
        r.Install('httpd.init', '%(initdir)s/httpd')
        r.Install('httpd.logrotate', '%(sysconfdir)s/logrotate.d/httpd')

        # symlinks for /etc/httpd
        r.MakeDirs('%(localstatedir)s/log/httpd')
        r.Remove('%(sysconfdir)s/httpd/logs', recursive=True)
        r.Symlink('%(localstatedir)s/log/httpd', '%(sysconfdir)s/httpd/logs')
        r.Symlink('%(localstatedir)s/run', '%(sysconfdir)s/httpd/run')
        r.Symlink('%(libdir)s/httpd/modules', '%(sysconfdir)s/httpd/modules')
        r.Symlink('%(libdir)s/httpd/build', '%(sysconfdir)s/httpd/build')

        r.Run('sed -i -e "s:\@docdir\@:%(thisdocdir)s:g" '
              ' %(destdir)s%(initdir)s/httpd')

        # fix manfile
        r.Replace('%(oldapachedir)s', '/etc/httpd', '%(mandir)s/man8/httpd.8')

        # sanitize config_vars file: relocate the build directory
        # into libdir; reference correct libtool; fix EXTRA_INCLUDES
        # needs to be sed for deleting lines
        r.Run('sed -i'
        ' -e "s|%(contentdir)s/build|%(libdir)s/httpd/build|g"'
        ' -e "/AP_LIBS/d"'
        ' -e "/abs_srcdir/d"'
        ' -e "/^LIBTOOL/s|/bin/sh /[^ ]*/libtool|/bin/sh %(apr_libtool)s|"'
        ' -e "/^installbuilddir/s| = .*$| = /etc/httpd/build|"'
        ' -e "s|^EXTRA_INCLUDES.*$|EXTRA_INCLUDES = -I\$(includedir) '
              '-I\$(APR_INCLUDEDIR) -I%(includedir)s/openssl|g"'
        ' %(destdir)s%(libdir)s/httpd/build/config_vars.mk')

        r.Doc('ABOUT_APACHE', 'VERSIONING')

        r.SetModes('%(sbindir)s/suexec', 04510)
        r.SetModes('%(localstatedir)s/{log/httpd,lib/dav,cache/mod_proxy}',
                   '%(sysconfdir)s/httpd/conf/ssl.*',
                   0700)
        r.Ownership('root', 'apache', '%(sbindir)s/suexec')
        r.Ownership('apache', 'apache',
                    '%(localstatedir)s/lib/dav',
                    '%(localstatedir)s/cache/mod_proxy')

        # PACKAGE: mod_ssl
        r.PackageSpec('mod_ssl',
                      '%(libdir)s/httpd/modules/mod_ssl.so',
                      '%(sysconfdir)s/httpd/conf.d/ssl.conf',
                      '%(sysconfdir)s/httpd/conf/Makefile',
                      '%(sysconfdir)s/httpd/conf/ssl\..*',
                      '%(localstatedir)s/cache/mod_ssl/',
                      '%(sysconfdir)s/ssl/pem/',
                      )
        r.ComponentSpec('runtime', '.*/mod_ssl.so')
        r.Requires("make:runtime", "%(sysconfdir)s/ssl/pem/Makefile")
        r.Requires("openssl:runtime", "%(sysconfdir)s/ssl/pem/Makefile")

        # Remove unpackaged files
        r.Run("find %(destdir)s/%(contentdir)s/manual \( "
              " -name \*.xml -o -name \*.xml.* -o -name \*.ent"
              " -o -name \*.xsl -o -name \*.dtd "
              " \) -print0 | xargs -0 rm -f")

        r.Remove('%(htconfdir)s/conf/extra/',
                 '%(htconfdir)s/conf/original/', recursive=True)

        r.Remove('%(libdir)s/*.exp',
                 '%(libdir)s/httpd/modules/*.exp',
                 '%(libdir)s/httpd/build/config.nice',
                 '%(htconfdir)s/conf/mime.types',
                 '%(bindir)s/ap?-config',
                 '%(sbindir)s/{checkgid,dbmmanage}',
                 '%(contentdir)s/{htdocs,cgi-bin}/*',
                 '%(mandir)s/man1/dbmmanage.*')

        # Create /var/www since it is the homedir for the apache user even
        # though it is not the document root (RPL-2947)
        r.MakeDirs('%(localstatedir)s/www')
        r.ExcludeDirectories(exceptions='%(localstatedir)s/www')

        # points to /var/run
        r.DanglingSymlinks(exceptions='%(htconfdir)s/run')
        # points to ssl certificate
        r.DanglingSymlinks(exceptions='%(htconfdir)s/conf/Makefile')
        # points to apr-utils libtool
        r.DanglingSymlinks(exceptions='%(libdir)s/httpd/build/libtool')
        # make sure permissions are correct
        r.ExcludeDirectories(exceptions='%(contentdir)s/cgi-bin')
        r.TagSpec('initscript', '%(initdir)s/')
        r.Requires('grep:runtime', '%(initdir)s/')
        r.Requires('make:runtime', '%(initdir)s/')

        # Require mailcap (need /etc/mime.types)
        r.Requires('mailcap:config', '%(initdir)s/')

        # Requires bzip2:runtime because compresssion is turned on in logrotate
        r.Requires('bzip2:runtime', '%(sysconfdir)s/logrotate.d/%(name)s')

        # We remove the bundled apr functionality, so we must require
        # the external version(s): <httpd/ap_config.h> #include's files
        # from both of these troves.  (RPL-798)
        r.Requires('apr:devel', '%(includedir)s/%(name)s/ap_config.h')
        r.Requires('apr-util:devel', '%(includedir)s/%(name)s/ap_config.h')

        # modules are shared libraries, but aren't linked to
        r.Provides(exceptions='%(libdir)s/httpd/modules/')

        # need empty html directory
        r.MakeDirs('%(contentdir)s/html')
        r.ExcludeDirectories(exceptions='%(contentdir)s/html')

        # apxs and envvars are tools for building httpd modules
        r.ComponentSpec('devel', '%(sbindir)s/(envvars.*|apxs)')
        r.ComponentSpec('devel', '%(libdir)s/httpd/build/')
        r.ComponentSpec('devel', '%(htconfdir)s/build')
        
        # tricks to avoid having to mod buildReqs of all mods. 
        r.Requires('pkgconfig:devel', '%(sbindir)s/(envvars.*|apxs)')
        r.Requires('gdbm:devel', '%(sbindir)s/(envvars.*|apxs)')
        r.Requires('perl:devel', '%(sbindir)s/(envvars.*|apxs)')

        r.SetModes('%(sbindir)s/envvars', '%(sbindir)s/envvars-std', 0755)

        r.MakeDirs('%(localstatedir)s/run/httpd')
        r.ExcludeDirectories(exceptions='%(localstatedir)s/run/httpd')

    def mpmbuild(r, target, extraConfig):
        r.Run('mkdir ' + target)
        r.ManualConfigure(' --enable-layout=rPath'
                          ' --with-pcre'
                          ' --with-mpm=' + target +
                          ' --with-apr=%(prefix)s --with-apr-util=%(prefix)s'
                          ' --enable-suexec --with-suexec'
                          ' --with-suexec-caller=%(suexec_caller)s'
                          ' --with-suexec-docroot=%(contentdir)s'
                          ' --with-suexec-logfile=%(localstatedir)s/log/httpd/suexec.log'
                          ' --with-suexec-bin=%(sbindir)s/suexec'
                          ' --with-suexec-uidmin=500 --with-suexec-gidmin=100 '
                          ' --prefix=%(sysconfdir)s/httpd'
                          ' --exec-prefix=%(prefix)s '
                          ' --bindir=%(bindir)s '
                          ' --sbindir=%(sbindir)s '
                          ' --mandir=%(mandir)s '
                          ' --libdir=%(libdir)s '
                          ' --localstatedir=%(localstatedir)s'
                          ' --sysconfdir=%(sysconfdir)s/httpd/conf '
                          ' --includedir=%(includedir)s/httpd '
                          ' --libexecdir=%(libdir)s/httpd/modules '
                          ' --datadir=%(contentdir)s '
                          ' --with-installbuilddir=%(libdir)s/httpd/build ' 

                          + extraConfig,
                          configureName='../configure',
                          dir=target,
                          preConfigure='SSL_LIBS="%(ssl_libs)s" '
                          'CFLAGS=$(echo "%(cflags)s")')
        r.Make(dir=target, preMake="SSL_LIBS='%(ssl_libs)s'")
